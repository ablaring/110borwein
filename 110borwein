#!/usr/bin/env python3

import sys
import math

def man_help():
    print("USAGE")
    print("\t\t./110borwein n\n")
    print("DESCRIPTION")
    print("\t\tn\tconstant defining the integral to be computed")

def midpoint(x):
    result = 0.0
    b = 5000
    n = 10000
    h = (b - 0) / n
    for a in range(n):
        result += get_sum(x, (a * h) + (h / 2))
    return result * h

def trapezoids(x):
    b = 5000
    n = 10000
    h = b / n
    result = get_sum(x, 0) + get_sum(x, b)
    for a in range(1, n):
        result += 2 * get_sum(x, a * h)
    return result * (h / 2)

def simpson(x):
    b = 5000
    n = 10000
    h = b / n
    res, ult = 0.0, 0.0
    for a in range(1, n):
        res += get_sum(x, a * h)
    for a in range(n):
        ult += get_sum(x, (a * h) + (h / 2))
    result = get_sum(x, 0) + get_sum(x, b) + (2 * res) + (4 * ult)
    return result * (b / (6 * n))

def get_sum(x, i):
    result = 1.0
    if i == 0:
        return 1
    for a in range(int(x) + 1):
        result *= (math.sin(i / (2 * a + 1)) / (i / (2 * a + 1)))
    return result

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Invalid number of arguments")
        sys.exit(84)

    if sys.argv[1] == "-h":
        man_help()
        sys.exit(0)

    if not sys.argv[1].isdigit():
        print("Not an integer number")
        sys.exit(84)

    x = float(sys.argv[1])
    methods = [("Midpoint", midpoint), ("Trapezoidal", trapezoids), ("Simpson", simpson)]

    for name, method in methods:
        result = method(x)
        diff = result - (math.pi / 2)
        print(f"{name}:\nI{x:.0f} = {result:.10f}\ndiff = {abs(diff):.10f}\n")
